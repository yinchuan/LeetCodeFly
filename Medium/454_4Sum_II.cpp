// https://leetcode.com/problems/4sum-ii/description/
#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <map>
#include <set>
#include <unordered_map>
#include <stack>
#include <numeric>
#include <queue>
#include <cmath>
#include "../lib/ListNode.h"
#include "../lib/TreeNode.h"
#include "../lib/utils.h"

using namespace std;

//#####
class Solution {
public:
    int fourSumCount(vector<int> &nums1, vector<int> &nums2, vector<int> &nums3, vector<int> &nums4) {
        ios_base::sync_with_stdio(false);
        int ans = 0;
        int n = nums1.size();

        unordered_map<int, int> cache;

        vector<int> oneTwo(n * n);
        vector<int> threeFour(oneTwo.size());
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                oneTwo[i * n + j] = nums1[i] + nums2[j];
                threeFour[i * n + j] = nums3[i] + nums4[j];
            }
        }
        sort(oneTwo.begin(), oneTwo.end());
        sort(threeFour.begin(), threeFour.end());

        auto left = 0;
        auto right = (int) threeFour.size() - 1;
        while (left < oneTwo.size() && right >= 0) {
            auto temp = oneTwo[left] + threeFour[right];
            if (temp == 0) {
                left++;
                right++;
                int c1 = 1;
                int c3 = 1;
                while(left < oneTwo.size() && oneTwo[left] == oneTwo[left-1]) {
                    c1++;
                    left++;
                }
                while(right >= 0 && threeFour[right] == threeFour[right+1]) {
                    c3++;
                    right--;
                }
                ans += c1*c3;
            } else if (temp < 0) {
                left++;
            } else {
                right--;
            }
        }

        return ans;
    }
};

//#####

// do not copy lines after this to LeetCode
int main() {
    Solution sol;
    int ans;
    vector<int> nums1;
    vector<int> nums2;
    vector<int> nums3;
    vector<int> nums4;

    nums1 = {1, 2}, nums2 = {-2, -1}, nums3 = {-1, 2}, nums4 = {0, 2};
    // 4013055
    nums1 = {-39, 78, -65, -35, 50, -81, -72, 83, -92, -26, -21, 39, -1, 94, 2, -2, 95, 18, -81, 85, -68, 49, 80, 48,
             -62, 46, 80, -36, -78, -33, -6, 25, 44, -48, -41, -66, 87, -52, -36, 65, 30, -42, -77, -65, -27, 57, -68,
             -89, 66, 54, -20, -64, -100, 22, -67, -8, 1, -100, 82, -90, 93, 66, -82, -74, 71, -12, 80, 73, 53, -9, 31,
             -74, 81, -44, -39, -55, 66, -3, 6, -27, 56, 60, -90, -35, 55, 66, 36, 79, -70, -55, 38, 2, -75, -34, 18,
             95, 55, 9, -4, -64, -86, -32, -4, -70, -95, -38, 9, 83, -35, -84, -69, -37, -65, -36, 44, 27, 73, -61, -81,
             -74, 7, 4, -1, -50, 39, 96, 4, -21, -52, 58, 3, 58, -20, -3, -76, 71, 28, -76, 12, -83, -97, -19, -77, 2,
             5, 30, -13, -66, -8, -82, -35, -3, 75, 43, 77, -50, 40, -67, -56, 26, -25, 29, -55, -5, 6, 56, 62, 26, -77,
             -71, 64, 42, -15, -8, -80, -23, -1, 35, 57, -23, -68, 0, -65, 82, -19, -27, -58};
    nums2 = {27, -76, -27, 51, 2, -23, 50, -37, -4, -47, 23, -56, -10, 90, 41, 77, 48, -53, 65, 78, -92, 64, 84, 89, 36,
             78, -94, -15, -42, 50, 97, 86, 54, 50, -21, 11, -45, -9, -90, -94, 65, 79, 28, -81, 75, 92, -64, 97, 41,
             -92, -36, 82, 69, 79, 1, -100, 88, 43, 1, -55, 30, 48, 5, 22, 85, 88, -83, 5, 42, -88, 88, 65, 40, 73, 92,
             -27, 8, -56, -73, -56, -46, -93, 53, -92, -72, 1, -5, 57, -47, 67, -18, 15, 22, 30, -70, -24, 59, -20, 35,
             -1, -21, -52, -70, -81, -8, -17, 21, -58, -70, -29, 27, -66, 28, 19, 25, -58, 49, 61, -74, 89, 53, 37, 89,
             39, -48, -33, -30, -31, -1, -1, 83, -56, 63, 85, 96, 60, -32, 27, -4, 48, -19, -30, 80, -3, 4, 93, -65,
             -91, -26, -34, -6, -28, 54, 4, 24, 50, 43, -76, -76, 10, 42, -75, -11, 93, -72, 41, 59, 60, 6, 48, -43,
             -82, -31, 59, 85, 40, -99, -33, 94, 36, -68, 69, 92, 56, 6, 3, 58};
    nums3 = {-74, 27, 32, 49, -35, 91, -41, 66, -100, -39, 69, -98, -72, 42, -8, -58, -36, 62, 32, -69, 53, -13, -49,
             -79, -32, 31, 10, -38, -75, -15, 1, -58, -100, 66, -14, -70, -97, -91, 57, 44, 70, 86, 49, -2, -46, -96,
             -71, 61, -10, -40, -13, -55, 77, -56, 8, -69, -88, -91, 88, -34, -24, 13, 47, 64, 62, -82, -84, -100, 28,
             38, -70, 95, -23, 51, -9, 90, 1, 38, 9, -91, -86, -99, 73, 63, -98, 30, -73, -63, 14, 40, 81, 28, 26, 12,
             53, 93, 71, 98, -97, -69, -65, 84, -69, 71, -84, 38, -70, 72, -30, -89, 72, -70, 75, 30, -21, -86, -47, 24,
             -93, 38, 33, -9, 57, 76, 35, 36, -25, -22, 92, -41, -83, -79, 35, -43, -64, 35, 72, 49, 92, 96, 98, 14, 2,
             -21, -42, 88, 97, -4, -2, -64, 12, 9, -59, 63, -56, 100, -8, 91, -34, 100, 15, -87, -80, 89, -57, 40, 40,
             -14, 75, 85, -88, -95, -63, -100, -97, -1, 60, 23, 93, 59, 61, -54, -44, 84, 70, 17, 89};
    nums4 = {60, 11, 22, -35, -57, -80, -78, 90, -47, -67, 5, 78, 52, -42, 41, 19, -47, -35, -79, 30, 60, -64, -67, -48,
             -76, -51, -28, 79, 45, 53, 81, 58, 61, 52, 48, 98, 68, 22, 47, -29, 86, 65, 35, 76, 34, 4, -18, -65, 32,
             -91, -53, -9, 51, 86, -32, 42, 3, 41, 78, -64, -94, 55, -98, 26, -60, 17, -98, -3, -67, 42, 10, 52, 45, 34,
             53, 39, -24, 78, 95, -74, 91, -54, -63, 14, 40, -12, 59, 13, 71, 87, -1, -63, -14, -42, 36, 63, -52, -94,
             -80, -88, -66, -30, -97, -87, 64, -70, 42, 70, -78, -14, -35, -96, 95, -42, -76, -97, -8, -76, 9, 46, -98,
             -13, -27, 54, -89, 24, -28, -92, -90, -90, 74, -86, -42, 53, 62, 0, 89, 64, 7, -48, 86, 75, 91, -49, -20,
             -62, 52, -12, 46, 55, -24, -68, 47, -3, -55, 67, -50, 48, -8, -32, -14, 57, 41, 76, 2, 23, -76, -74, -73,
             58, 0, -52, 6, 12, 39, -82, 62, -16, -59, -82, -53, -12, 38, -57, -72, 58, 37};
    ans = sol.fourSumCount(nums1, nums2, nums3, nums4);
    std::cout << ans << std::endl;
}
        